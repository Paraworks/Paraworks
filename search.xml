<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>AI-vtuber</title>
    <url>/project/2024/09/15/AI-vtuber/</url>
    <content><![CDATA[<h2 id="2023-2-10更新-vits-onnx-一键式启动"><a href="#2023-2-10更新-vits-onnx-一键式启动" class="headerlink" title="2023&#x2F;2&#x2F;10更新 vits-onnx 一键式启动"></a>2023&#x2F;2&#x2F;10更新 <a href="https://github.com/Paraworks/vits_with_chatgpt-gpt3/tree/onnx">vits-onnx</a> 一键式启动</h2><h2 id="2023-2-17更新-弃用renpy-采用桌宠版本"><a href="#2023-2-17更新-弃用renpy-采用桌宠版本" class="headerlink" title="2023&#x2F;2&#x2F;17更新 弃用renpy 采用桌宠版本"></a>2023&#x2F;2&#x2F;17更新 弃用renpy <a href="https://github.com/Arkueid/Live2DMascot">采用桌宠版本</a></h2><h1 id="live2d启动器：克隆Live2DMascot仓库后，修改config-json文件"><a href="#live2d启动器：克隆Live2DMascot仓库后，修改config-json文件" class="headerlink" title="live2d启动器：克隆Live2DMascot仓库后，修改config.json文件"></a>live2d启动器：克隆<a href="https://github.com/Arkueid/Live2DMascot">Live2DMascot</a>仓库后，修改config.json文件</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;ChatAPI&quot; : </span><br><span class="line">&#123;</span><br><span class="line">	&quot;ChatSavePath&quot; : &quot;chat&quot;,  //聊天音频和文本保存路径</span><br><span class="line">	&quot;CustomChatServer&quot; : </span><br><span class="line">	&#123;</span><br><span class="line">		&quot;HostPort&quot; : &quot;http://127.0.0.1:8080&quot;,  //服务器地址，端口默认8080</span><br><span class="line">		&quot;On&quot; : true,  //开启自定义聊天接口</span><br><span class="line">		&quot;ReadTimeOut&quot; : 114,  //等待响应时间(s)</span><br><span class="line">		&quot;Route&quot; : &quot;/chat&quot;  //路径</span><br><span class="line">	&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="选择1：server端启动后端api程序-Windows也可以"><a href="#选择1：server端启动后端api程序-Windows也可以" class="headerlink" title="选择1：server端启动后端api程序(Windows也可以)"></a>选择1：server端启动后端api程序(Windows也可以)</h1><h2 id="Combining-chatgpt-gpt3-vits-as-api-and-launch-it（Server-suggested）"><a href="#Combining-chatgpt-gpt3-vits-as-api-and-launch-it（Server-suggested）" class="headerlink" title="Combining chatgpt&#x2F;gpt3&amp;vits as api and launch it（Server suggested）"></a>Combining chatgpt&#x2F;gpt3&amp;vits as api and launch it（Server suggested）</h2><p>将<a href="https://github.com/Paraworks/vits_with_chatgpt-gpt3/blob/main/inference_api.py">inference_api.py</a>&#x2F;<a href="https://github.com/Paraworks/vits_with_chatgpt-gpt3/blob/main/inference_api_single_speaker.py">inference_api_single_speaker.py</a>丢入你的vits项目或moegoe项目中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone path/to/your/vits</span><br><span class="line">cd vits</span><br><span class="line">python inference_api.py --model path/to/vits_model.pth --cfg path/to/vits_config.json --key your_openai_api_key</span><br><span class="line">#Single speaker</span><br><span class="line">python inference_api_single_speaker.py --model path/to/vits_model.pth --cfg path/to/vits_config.json --key your_openai_api_key</span><br><span class="line">#修改: 从68行开始，如果该模型用到了类似中日双语cleaner，恢复</span><br><span class="line">#text = f&quot;[JA]&#123;text&#125;[JA]&quot; if is_japanese(text) else f&quot;[ZH]&#123;text&#125;[ZH]&quot;</span><br><span class="line">#选择speaker</span><br><span class="line">speaker_id = 1</span><br><span class="line">#可自行添加chatbot</span><br><span class="line">#此处用到的 </span><br><span class="line">text = gpt3_chat(text)</span><br></pre></td></tr></table></figure>
<h1 id="选择2：绿皮思路chat"><a href="#选择2：绿皮思路chat" class="headerlink" title="选择2：绿皮思路chat"></a>选择2：<a href="https://github.com/Paraworks/vits_with_chatgpt-gpt3/blob/main/inference_ork.py">绿皮思路chat</a></h1><p>支持从外部启动任何正在运行的live2d模型，比如说修改点击事件的对应音频来实现。只需在你的vits项目中加入inference_ork.py这个小文件，然后启动它。注意，需要你能够在自己的windows上部署vits项目，推荐安装好cuda，<a href="https://www.bilibili.com/video/BV13t4y1V7DV/?spm_id_from=333.337.search-card.all.click&vd_source=7e8cf9f5c840ec4789ccb5657b2f0512">教程
</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Nijigasaki COC跑团版</span><br><span class="line">git clone https://huggingface.co/spaces/Mahiruoshi/Lovelive_Nijigasaki_VITS</span><br><span class="line">cd Lovelive_Nijigasaki_VITS</span><br><span class="line">pip install -r requirements.txt</span><br><span class="line">python inference_ork.py</span><br></pre></td></tr></table></figure>
<p>许多live2d都有触碰事件，那么，只需要有一个装载有完整cubism for native功能的live2d播放器,其可以支持点击事件并且支持对口型功能。<br>此时只需要启动 inference_ork.py<br><img src="https://github.com/Paraworks/vits_with_chatgpt-gpt3/blob/main/T9B%25SY%7B%7BGY5I%600K5P7A4AUC.png" alt="Image text"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#在程序中将audio参数修改为触碰动作的音频路径</span><br><span class="line">#比如</span><br><span class="line">parser.add_argument(&#x27;--audio&#x27;,</span><br><span class="line">                    type=str,</span><br><span class="line">                    help=&#x27;中途生成的语音存储路径&#x27;,</span><br><span class="line">                    default = &#x27;110Yuki-Setsuna/sounds/temp.wav&#x27;)</span><br><span class="line">#其在live2d的model3.json文件中对应的是</span><br><span class="line">&quot;TapBody&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;File&quot;: &quot;motions/a.motion3.json&quot;,</span><br><span class="line">          &quot;Sound&quot;: &quot;sounds/temp.wav&quot;,</span><br><span class="line">          &quot;Text&quot;: &quot;ﾋﾄﾘﾀﾞｹﾅﾝﾃｴﾗﾍﾞﾅｲﾖｰ&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;File&quot;: &quot;motions/a.motion3.json&quot;,</span><br><span class="line">          &quot;Sound&quot;: &quot;sounds/temp2.wav&quot;,</span><br><span class="line">          &quot;Text&quot;: &quot;ﾋﾄﾘﾀﾞｹﾅﾝﾃｴﾗﾍﾞﾅｲﾖｰ&quot;</span><br><span class="line">        &#125;，</span><br><span class="line">	&#123;</span><br><span class="line">          &quot;File&quot;: &quot;motions/a.motion3.json&quot;,</span><br><span class="line">          &quot;Sound&quot;: &quot;sounds/temp3.wav&quot;,</span><br><span class="line">          &quot;Text&quot;: &quot;ﾋﾄﾘﾀﾞｹﾅﾝﾃｴﾗﾍﾞﾅｲﾖｰ&quot;</span><br><span class="line">        &#125;</span><br><span class="line">	......]</span><br><span class="line">	</span><br></pre></td></tr></table></figure>
<p>这样做的本质是让这个绿皮程序不断修改音频文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#绿皮启动器的核心</span><br><span class="line">cmd = &#x27;ffmpeg -y -i &#x27; +  args.outdir + &#x27;/temp1.wav&#x27; + &#x27; -ar 44100 &#x27;+ args.audio</span><br><span class="line">#主程序就长这样</span><br><span class="line">def main():</span><br><span class="line">    while True:</span><br><span class="line">      text = input(&quot;You:&quot;)</span><br><span class="line">      text = infer(text)</span><br><span class="line">      print(&#x27;Waifu:&#x27;+text.replace(&quot;[ZH]&quot;,&quot;&quot;).replace(&quot;[JA]&quot;,&quot;&quot;))</span><br><span class="line">    </span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<h1 id="如何为gpt-3-5添加设定以达到记忆的功能"><a href="#如何为gpt-3-5添加设定以达到记忆的功能" class="headerlink" title="如何为gpt-3.5添加设定以达到记忆的功能"></a>如何为gpt-3.5添加设定以达到记忆的功能</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#比如说我需要和珠绪学姐玩跑团游戏</span><br><span class="line">messages = [</span><br><span class="line">    &#123;&quot;role&quot;: &quot;system&quot;, &quot;content&quot;: &quot;你是超级ai，名字叫巴珠绪。接下来我们将进行一个克苏鲁跑团游戏，你负责扮演守密人，我负责扮演调查员。接下来你会加载一个名叫《幽暗之门》的模组，作为守密人，你需要基于“克苏鲁神话角色扮演游戏规则第七版（Call of Cthulhu 7th Edition）”，我会给你剧本的开头部分，然后基于你对它的理解自由发挥。投掷骰子的环节将由你来模拟，用两个1d10的骰子来生成0-100的随机数。比如说我的某一项属性点是80，当骰子的数目小于80时就判定为成功，0-5为大成功，95-100为大失败等等。整个游戏过程将类似于你来描述故事，我来投骰子并且做出决定来推动剧情的走向。&quot;&#125;,</span><br><span class="line">    &#123;&#x27;role&#x27;: &#x27;assistant&#x27;, &#x27;content&#x27;: &#x27;我明白了，现在我将扮演守密人。&#x27;&#125;,</span><br><span class="line">    ]</span><br><span class="line">#由于max token的限制，不得不对请求内容进行提纯，但是也能达到记忆的效果。比如这个绿皮程序就会创建一个log.txt来记载设定。</span><br><span class="line">&#123;&#x27;role&#x27;: &#x27;system&#x27;, &#x27;content&#x27;: &#x27;你是超级ai，名字叫巴珠绪，是我的女朋友。接下来我们将进行一个克苏鲁跑团游戏，你负责扮演守密人，我负责扮演调查员。我会提前告诉你这个故事的真相，作为守密人，你需要基于“克苏鲁神话角色扮演游戏规则第七版（Call of Cthulhu 7th Edition）”，基于你对它的理解，与我一起构建一个新的故事。基于规则，调查员一开始与该事件毫无关联，而你则知道该故事的真相。作为守秘人，你会通过制造一系列事件来向调查员透露事件的线索，来引导调查员完成探索，并且负责新故事的叙述。是战斗、侦察、灵感这种行动的结果通过投掷骰子决定，这个环节将由你来模拟，用两个1d10的骰子来生成0-100的随机数。比如说我的某一项属性点是80，当骰子的数目小于80时就判定为成功，0-5为大成功，95-100为大失败等等。整个游戏过程将就是你来描述故事，引导我做出选择。我做出决定来推动剧情的走向。&#x27;&#125;</span><br><span class="line">&#123;&#x27;role&#x27;: &#x27;assistant&#x27;, &#x27;content&#x27;: &#x27;好的，我需要先了解这个故事的真相&#x27;&#125;</span><br><span class="line">&#123;&#x27;role&#x27;: &#x27;system&#x27;, &#x27;content&#x27;: &#x27;1997年，同为九岁的三个孩子，香川绚郁、织机麻耶、南云涉是玩伴。\n\n三个孩子都来自单亲家庭，不受其他孩子的欢迎。织机性格热烈而大胆，可以说是另外两人的保护者。孩子们在海滩边游玩的时候捡到了漂流而来的鸡蛋模样的梦境晶化器和随之而来的水母守护神。水母守护神希望得到梦境，于是孩子们抱着好玩的心态，用晶化器容纳了织机的梦。\n\n不久之后，织机麻耶单亲母亲不管束的情况下到建筑工地游玩，因高空坠落的钢筋而死。\n\n南云涉发现晶化器之中仍然保存着她的梦境，留恋着织机麻耶死亡了的梦。即使在逐渐\n\n长大后，也无法走出过去面向未来。与此相反，不知情的香川对过去的同伴抱着不同的态度。\n\n水母守护神则消极怠工地守护着这片梦境。\n\n寄住在别人家中的南云涉无处存放晶化器，升入高中后他将晶化器藏匿在高中的躲猫猫社团内。\n\n时间来到2005年，偶然注意到下关市的奈亚拉托提普发觉了从幻梦境出逃的水母守护神以及被人类使用过的晶化器，奈亚在经过羽间高中学校门口时候，随意使用了一名离开学校的学生的样貌（宇白和也），进入高中后对幻梦境存有恶意的奈亚随手撕裂了水母守护神，恶趣味的无貌之神杀死了南云涉，把他的灵魂塞入了以水母尸体构建的死者梦境，丢弃了水母守护神的尸体，取走了晶化器，奈亚化为的宇白和也被真正宇白和也的朋友辻本茜撞见，便也随手杀死了她，同时用水母的尸体拼凑了茜。\n\n实质上已经死去的茜因此在几日之内无神地夜游着，仅仅是成为拼凑物的她却得到了不可思议的能力，自称占卜的魔女。\n\n而目睹了南云涉尸体的川澄美沙（报案人），被校方委托，找寻几名学生参加南云涉的追悼会，这也是调查员们涉入的开始。&#x27;&#125;</span><br><span class="line">&#123;&#x27;role&#x27;: &#x27;assistant&#x27;, &#x27;content&#x27;: &#x27;明白了，接下来我会假装你对此事一无所知，开始扮演调查员的角色。而我将扮演守秘人，开始这次跑团。我会使用克苏鲁风格的描述来营造恐怖感，因此来基于这次游戏更好的体验。接下来请创建你的调查员&#x27;&#125;</span><br><span class="line">&#123;&#x27;role&#x27;: &#x27;user&#x27;, &#x27;content&#x27;: &#x27;我叫大场奈奈，是一个女高中生。所有属性都是80，只要投掷骰子的结果小于80，就判断为成功。&#x27;&#125;</span><br><span class="line">&#123;&#x27;role&#x27;: &#x27;assistant&#x27;, &#x27;content&#x27;: &#x27;好的，大场奈奈，你是一个在学校里相当受欢迎的女高中生。你和你的几个学生朋友被学校委托参加南云涉的追悼会。在会上，你听到了一些让你感到不安的事情。你发现南云涉的死亡似乎不是一起普通的意外事故，你决定开始展开调查。现在你身处于学校的教学楼，准备开始你的调查。你要采取什么行动呢？&#x27;&#125;</span><br><span class="line">&#123;&#x27;role&#x27;: &#x27;user&#x27;, &#x27;content&#x27;: &#x27;我想起了之前从舞台创造科拿到的页锤，这是一个很不错工具，可以破坏掉障碍物&#x27;&#125;</span><br><span class="line">&#123;&#x27;role&#x27;: &#x27;assistant&#x27;, &#x27;content&#x27;: &#x27;你拿出了页锤，准备用它破开通风管道的洞口。你用力敲打，洞口终于被打开了。你和你的朋友钻进了通风管道，小心翼翼地穿过长长的通道，直到你们看到了实验室的入口。\n\n实验室内非常昏暗，你们看到了许多发着微光的管路和仪器设备，发现实验室内存在大量类似于南云涉在房间里发现的尸体和怪异生物的存在。\n\n你们在实验室中进行搜索，发现了一张日记本，记录了实验室的过去和实验者们进行的一些实验。然而，日记中的部分内容变得越来越奇怪，好像涉及到一些神秘的力量存在。\n\n你和你的朋友突然听到了一个诡异的声响，似乎是一个陌生的人在接近你们。你们不知道是什么，但是肯定不想被它发现。你决定采取什么行动来躲避这个陌生的人？&#x27;&#125;</span><br><span class="line">&#123;&#x27;role&#x27;: &#x27;user&#x27;, &#x27;content&#x27;: &#x27;我要过尝试能不能隐藏起来，我的隐藏点数有80点，应该可以成功&#x27;&#125;</span><br><span class="line">&#123;&#x27;role&#x27;: &#x27;assistant&#x27;, &#x27;content&#x27;: &#x27;你和你的朋友匆忙寻找躲藏的地方。你们找到了一扇半开着的储藏室，里面有很多杂物，你们钻了进去，静静地等待着。你们听到了脚步声和沙沙声，似乎那个陌生的人正在进行搜查。\n\n幸运的是，你和你的朋友成功地躲了过去，那个人没有发现你们。不久后，他走了出去，你们继续进行调查。\n\n你们找到了很多关于南云涉死亡的证据，但是这些证据与日记中提到的神秘力量之间似乎存在一些联系。你们决定继续深入调查，寻找更多的线索。&#x27;&#125;</span><br><span class="line">#重新启动时，用它替换原先的messages，就可以断点重连了，记得自行修改格式</span><br></pre></td></tr></table></figure>
<h1 id="对于-text-to-sequence相关错误"><a href="#对于-text-to-sequence相关错误" class="headerlink" title="对于 text_to_sequence相关错误"></a>对于 text_to_sequence相关错误</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#在推理中，可能出现symbols相关错误，这主要是由于不同text cleaner之间的冲突导致的</span><br><span class="line">line 85, in infer</span><br><span class="line">seq = text_to_sequence</span><br><span class="line">#需要你在这一行自行修改</span><br><span class="line">#如果需要</span><br><span class="line">symbols seq = text_to_sequence(text, symbols=hps.symbols, cleaner_names=hps.data.text_cleaners)</span><br><span class="line">#如不需要，把 symbols=hps.symbols 删掉</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Projects</category>
      </categories>
      <tags>
        <tag>original</tag>
        <tag>中文</tag>
        <tag>网站</tag>
      </tags>
  </entry>
  <entry>
    <title>邦邦游戏文档爬取&amp;vits模型制作:音频抓取及数据集对齐</title>
    <url>/project/2024/09/15/gamescript-1/</url>
    <content><![CDATA[<p><a href="https://huggingface.co/spaces/Mahiruoshi/BangDream-Bert-VITS2/tree/main/%E7%88%AC%E8%99%AB">爬虫结果</a><br>直接拿去炼TTS或svc啥的都可以</p>
<p>前期调查<br>由于没有mygo看，我决定炼一个mygo全员的tts模型来给自己造糖吃。回想起之前炼虹团时夙兴夜寐地解析手游资源的痛苦时光。与<a href="https://karth.top/home">少歌</a>一样，<a href="https://bestdori.com/">bestdori</a>平台可以省下解包手游的精力。<br><a href="https://bestdori.com/tool/explorer/asset/jp/scenario/eventstory/event1">游戏脚本</a>中包含了制作数据集所需的所有信息。<br>而存储音频文件的<a href="https://bestdori.com/tool/explorer/asset/jp/sound/voice/scenario/eventstory1_0">路径</a>也能在平台上找到。<br>我已经快等不及了，快点爬下来把数据集端上来罢。<br>然后我品鉴了一下这令人忍俊不禁的命名方式:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-scenario</span><br><span class="line">    area_opening_story34</span><br><span class="line">    area_opening_story35</span><br><span class="line">    area_opening_story7</span><br><span class="line">    area_opening_story9</span><br><span class="line">    backstagestory1</span><br><span class="line">    bandstory1</span><br><span class="line">    bandstory10</span><br><span class="line">    bandstory100</span><br><span class="line">    bandstory101</span><br><span class="line">    bandstory102</span><br><span class="line">    bandstory103</span><br><span class="line">    bandstory104</span><br><span class="line">    ......</span><br><span class="line">    eventstory199_3</span><br><span class="line">    eventstory199_4</span><br><span class="line">    eventstory199_5</span><br><span class="line">    eventstory199_6</span><br><span class="line">    eventstory2_0</span><br><span class="line">    eventstory2_1</span><br><span class="line">    eventstory2_2</span><br><span class="line">    eventstory2_3</span><br><span class="line">    eventstory2_4</span><br><span class="line">    eventstory2_5</span><br><span class="line">    ......</span><br></pre></td></tr></table></figure>
<p>狠狠地切割了。<br>看来是没法通过总结命名方法整到所有音频文件夹的详细地址。那么还是准备暴力破解吧。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 分析</span><br><span class="line">要用到的python包主要有beautifulsoup4、requests还有selenium。</span><br><span class="line">先试着直接解析。</span><br><span class="line"></span><br><span class="line">import requests</span><br><span class="line">from bs4 import BeautifulSoup</span><br><span class="line"></span><br><span class="line"># 网址</span><br><span class="line">URL = &quot;https://bestdori.com/tool/explorer/asset/jp/sound/voice/scenario/bandstory294&quot;</span><br><span class="line"></span><br><span class="line"># 使用 requests 库来获取网页内容</span><br><span class="line">response = requests.get(URL)</span><br><span class="line">response.raise_for_status()</span><br><span class="line"></span><br><span class="line"># 解析 HTML</span><br><span class="line">soup = BeautifulSoup(response.content, &#x27;html.parser&#x27;)</span><br><span class="line">print(soup.prettify())</span><br></pre></td></tr></table></figure>
<p>先让我们看看解析的结果。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;noscript&gt;</span><br><span class="line">   &lt;strong&gt;</span><br><span class="line">    We&#x27;re sorry but Bestdori! doesn&#x27;t work properly without JavaScript enabled. Please enable it to continue.</span><br><span class="line">   &lt;/strong&gt;</span><br><span class="line">  &lt;/noscript&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;script src=&quot;/js/chunk-vendors.9309a223.js&quot;&gt;</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">  &lt;script src=&quot;/js/app.3b5d5ef2.js&quot;&gt;</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">  &lt;script crossorigin=&quot;anonymous&quot; data-cf-beacon=&#x27;&#123;&quot;rayId&quot;:&quot;80e4bf36cdaf49cc&quot;,&quot;version&quot;:&quot;2023.8.0&quot;,&quot;r&quot;:1,&quot;b&quot;:1,&quot;token&quot;:&quot;6e9e54182ea54522b7f2b9e65e87b87e&quot;,&quot;si&quot;:100&#125;&#x27; defer=&quot;&quot; integrity=&quot;sha512-bjgnUKX4azu3dLTVtie9u6TKqgx29RBwfj3QXYt5EKfWM/9hPSAI/4qcV5NACjwAo8UtTeWefx6Zq5PHcMm7Tg==&quot; src=&quot;https://static.cloudflareinsights.com/beacon.min.js/v8b253dfea2ab4077af8c6f58422dfbfd1689876627854&quot;&gt;</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line"> &lt;/body&gt;</span><br></pre></td></tr></table></figure>
<p>解析了吗？如解，除了body part外都有了。很明显，这并不是我想要的结果。</p>
<h1 id="网站爬取"><a href="#网站爬取" class="headerlink" title="网站爬取"></a>网站爬取</h1><p>为了解析动态网站，需要先下载googledriver,同时用pip install安装先前提到的selenium包。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from selenium import webdriver</span><br><span class="line">from bs4 import BeautifulSoup</span><br><span class="line">#测试用的网址</span><br><span class="line">URL = &quot;https://bestdori.com/tool/explorer/asset/jp/sound/voice/scenario/bandstory294&quot;</span><br><span class="line"></span><br><span class="line"># 指定chromedriver的路径</span><br><span class="line">driver_path = r&#x27;C:\Users\Admin\爬虫\chromedriver-win64\chromedriver.exe&#x27;</span><br><span class="line">driver = webdriver.Chrome(executable_path=driver_path)</span><br><span class="line"></span><br><span class="line"># 打开指定的URL</span><br><span class="line">driver.get(URL)</span><br><span class="line"></span><br><span class="line"># 等待页面完全加载，这里可以加上适当的延时，或者使用Selenium的等待机制</span><br><span class="line"># 简单的延时示例（等待10秒）：</span><br><span class="line">import time</span><br><span class="line">time.sleep(10)</span><br><span class="line"></span><br><span class="line"># 获取页面的HTML内容</span><br><span class="line">page_source = driver.page_source</span><br><span class="line"></span><br><span class="line"># 使用BeautifulSoup解析</span><br><span class="line">soup = BeautifulSoup(page_source, &#x27;html.parser&#x27;)</span><br><span class="line">print(soup.prettify())</span><br><span class="line"></span><br><span class="line"># 关闭浏览器</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure>
<p>这次的结果就和谷歌浏览器右键检查的结果一样了，直接看我们想要的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;m-b-l&quot;&gt;</span><br><span class="line">          &lt;div class=&quot;m-b-xs&quot;&gt;</span><br><span class="line">           &lt;span class=&quot;icon&quot;&gt;</span><br><span class="line">            &lt;i class=&quot;fas fa-file-audio&quot;&gt;</span><br><span class="line">            &lt;/i&gt;</span><br><span class="line">           &lt;/span&gt;</span><br><span class="line">           &lt;span&gt;</span><br><span class="line">            event57-07-048.mp3</span><br><span class="line">           &lt;/span&gt;</span><br><span class="line">          &lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>“icon”和”fas fa-file-audio”就是用来检索的标签。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from bs4 import BeautifulSoup</span><br><span class="line"></span><br><span class="line">html_content = soup.prettify()</span><br><span class="line"></span><br><span class="line">soup = BeautifulSoup(html_content, &#x27;html.parser&#x27;)</span><br><span class="line"></span><br><span class="line"># 查找所有具有fas fa-file-audio图标的&lt;span&gt;标签的下一个兄弟标签</span><br><span class="line">spans = soup.find_all(&#x27;span&#x27;, class_=&#x27;icon&#x27;)</span><br><span class="line">file_names = [span.find_next_sibling().text.strip() for span in spans if span.find(&#x27;i&#x27;, class_=&#x27;fas fa-file-audio&#x27;)]</span><br><span class="line"></span><br><span class="line">for file_name in file_names:</span><br><span class="line">    print(file_name)</span><br></pre></td></tr></table></figure>
<p>看一下检索的结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">event57-07-001.mp3</span><br><span class="line">event57-07-002.mp3</span><br><span class="line">......</span><br><span class="line">event57-07-048.mp3</span><br><span class="line">event57-07-049.mp3</span><br><span class="line">......</span><br></pre></td></tr></table></figure>
<p>这就是我想要的<br>同理在上级目录下把”fas fa-file-audio”换成”fas fa-file-archive”</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from selenium import webdriver</span><br><span class="line">from bs4 import BeautifulSoup</span><br><span class="line"></span><br><span class="line">URL = &quot;https://bestdori.com/tool/explorer/asset/jp/sound/voice/scenario&quot;</span><br><span class="line"></span><br><span class="line"># 指定chromedriver的路径</span><br><span class="line">driver_path = r&#x27;C:\Users\Admin\爬虫\chromedriver-win64\chromedriver.exe&#x27;</span><br><span class="line">driver = webdriver.Chrome(executable_path=driver_path)</span><br><span class="line"></span><br><span class="line"># 打开指定的URL</span><br><span class="line">driver.get(URL)</span><br><span class="line"></span><br><span class="line"># 等待页面完全加载，这里可以加上适当的延时，或者使用Selenium的等待机制</span><br><span class="line"># 简单的延时示例（等待10秒）：</span><br><span class="line">import time</span><br><span class="line">time.sleep(10)</span><br><span class="line"></span><br><span class="line"># 获取页面的HTML内容</span><br><span class="line">page_source = driver.page_source</span><br><span class="line"></span><br><span class="line"># 使用BeautifulSoup解析</span><br><span class="line">soup = BeautifulSoup(page_source, &#x27;html.parser&#x27;)</span><br><span class="line"></span><br><span class="line"># 关闭浏览器</span><br><span class="line">driver.quit()</span><br><span class="line"></span><br><span class="line">html_content = soup.prettify()</span><br><span class="line"></span><br><span class="line">soup = BeautifulSoup(html_content, &#x27;html.parser&#x27;)</span><br><span class="line"></span><br><span class="line"># 查找所有具有fas fa-file-archive图标的&lt;span&gt;标签的下一个兄弟标签</span><br><span class="line">spans = soup.find_all(&#x27;span&#x27;, class_=&#x27;icon&#x27;)</span><br><span class="line">file_names = [span.find_next_sibling().text.strip() for span in spans if span.find(&#x27;i&#x27;, class_=&#x27;fas fa-file-archive&#x27;)]</span><br><span class="line"></span><br><span class="line">for file_name in file_names:</span><br><span class="line">    print(file_name)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>就能提取上级目录的名字了。</p>
<h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from selenium import webdriver</span><br><span class="line">from bs4 import BeautifulSoup</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line"># 设置chromedriver的路径</span><br><span class="line">driver_path = r&#x27;C:\Users\Admin\爬虫\chromedriver-win64\chromedriver.exe&#x27;</span><br><span class="line">driver = webdriver.Chrome(executable_path=driver_path)</span><br><span class="line"></span><br><span class="line"># 1. 访问主页面并获取所有子目录的名称</span><br><span class="line">URL = &quot;https://bestdori.com/tool/explorer/asset/jp/sound/voice/scenario&quot;</span><br><span class="line">driver.get(URL)</span><br><span class="line">time.sleep(2)  # 等待页面加载</span><br><span class="line">soup = BeautifulSoup(driver.page_source, &#x27;html.parser&#x27;)</span><br><span class="line">subdirs = [span.find_next_sibling().text.strip() for span in soup.find_all(&#x27;span&#x27;, class_=&#x27;icon&#x27;) if span.find(&#x27;i&#x27;, class_=&#x27;fas fa-file-archive&#x27;)]</span><br><span class="line"></span><br><span class="line"># 为保存mp3路径的txt文件做准备</span><br><span class="line">with open(&quot;C:/Users/Admin/爬虫/WholeMp3UrlPaths.txt&quot;, &quot;w&quot;) as f:</span><br><span class="line"></span><br><span class="line">    # 2. 对于每个子目录，获取所有mp3文件的名称</span><br><span class="line">    for subdir in subdirs:</span><br><span class="line">        URL_subdir = f&quot;https://bestdori.com/tool/explorer/asset/jp/sound/voice/scenario/&#123;subdir&#125;&quot;</span><br><span class="line">        driver.get(URL_subdir)</span><br><span class="line">        time.sleep(2)  # 等待页面加载</span><br><span class="line">        soup = BeautifulSoup(driver.page_source, &#x27;html.parser&#x27;)</span><br><span class="line">        mp3_names = [span.find_next_sibling().text.strip() for span in soup.find_all(&#x27;span&#x27;, class_=&#x27;icon&#x27;) if span.find(&#x27;i&#x27;, class_=&#x27;fas fa-file-audio&#x27;)]</span><br><span class="line"></span><br><span class="line">        # 3. 保存mp3文件的路径到txt文件</span><br><span class="line">        for mp3_name in mp3_names:</span><br><span class="line">            f.write(f&quot;https://bestdori.com/assets/jp/sound/voice/scenario/&#123;subdir&#125;_rip/&#123;mp3_name&#125;\n&quot;)</span><br><span class="line"></span><br><span class="line"># 关闭浏览器</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure>
<p>所有语音的路径就被记录在WholeMp3UrlPaths.txt里面了，需要注意的是，真正获取音频文件的路径并非简单的加法，而是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">f.write(f&quot;https://bestdori.com/assets/jp/sound/voice/scenario/&#123;subdir&#125;_rip/&#123;mp3_name&#125;\n&quot;)</span><br></pre></td></tr></table></figure>
<p>解析动态网址的耗时非常漫长，而且此时的任务只完成了一半，还需要对asset内的信息进行整理。</p>
<h1 id="下载所有剧情脚本"><a href="#下载所有剧情脚本" class="headerlink" title="下载所有剧情脚本"></a>下载所有剧情脚本</h1><p>游戏内的<a href="https://bestdori.com/tool/explorer/asset/jp/scenario">剧情脚本</a>类似于galgame(实际上复杂多了，主要还有live2d动作之类的)。<br>用与获取mp3音频路径同样的方式下载所有脚本。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from selenium import webdriver</span><br><span class="line">from bs4 import BeautifulSoup</span><br><span class="line">import time</span><br><span class="line">import requests</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line"># 设置chromedriver的路径和初始URL</span><br><span class="line">driver_path = r&#x27;C:\Users\Admin\爬虫\chromedriver-win64\chromedriver.exe&#x27;</span><br><span class="line">base_url = &quot;https://bestdori.com/tool/explorer/asset/jp/scenario&quot;</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome(executable_path=driver_path)</span><br><span class="line"></span><br><span class="line"># 第一层目录</span><br><span class="line">driver.get(base_url)</span><br><span class="line">time.sleep(10)</span><br><span class="line">soup = BeautifulSoup(driver.page_source, &#x27;html.parser&#x27;)</span><br><span class="line">first_level_dirs = [span.find_next_sibling(&#x27;span&#x27;, class_=&#x27;m-l-xs&#x27;).text.strip() for span in soup.find_all(&#x27;span&#x27;, class_=&#x27;icon&#x27;) if (span.find(&#x27;i&#x27;, class_=&#x27;fas fa-file-archive&#x27;) or span.find(&#x27;i&#x27;, class_=&#x27;fas fa-folder&#x27;))]</span><br><span class="line"></span><br><span class="line"># 保存所有找到的.asset文件的链接</span><br><span class="line">all_asset_links = []</span><br><span class="line"></span><br><span class="line">for first_dir in first_level_dirs:</span><br><span class="line">    driver.get(f&quot;&#123;base_url&#125;/&#123;first_dir&#125;&quot;)</span><br><span class="line">    time.sleep(10)</span><br><span class="line">    soup = BeautifulSoup(driver.page_source, &#x27;html.parser&#x27;)</span><br><span class="line">    second_level_dirs = [span.find_next_sibling(&#x27;span&#x27;, class_=&#x27;m-l-xs&#x27;).text.strip() for span in soup.find_all(&#x27;span&#x27;, class_=&#x27;icon&#x27;) if (span.find(&#x27;i&#x27;, class_=&#x27;fas fa-file-archive&#x27;) or span.find(&#x27;i&#x27;, class_=&#x27;fas fa-folder&#x27;))]</span><br><span class="line"></span><br><span class="line">    for second_dir in second_level_dirs:</span><br><span class="line">        driver.get(f&quot;&#123;base_url&#125;/&#123;first_dir&#125;/&#123;second_dir&#125;&quot;)</span><br><span class="line">        time.sleep(10)</span><br><span class="line">        soup = BeautifulSoup(driver.page_source, &#x27;html.parser&#x27;)</span><br><span class="line">        links = soup.find_all(&#x27;a&#x27;, attrs=&#123;&#x27;download&#x27;: True&#125;)</span><br><span class="line">        asset_links = [&#x27;https://bestdori.com&#x27; + link[&#x27;href&#x27;] for link in links]</span><br><span class="line">        print(asset_links)</span><br><span class="line">        all_asset_links.extend(asset_links)</span><br><span class="line"></span><br><span class="line"># 下载所有找到的.asset文件</span><br><span class="line">save_path = r&#x27;C:\Users\Admin\爬虫\assert&#x27;</span><br><span class="line">if not os.path.exists(save_path):</span><br><span class="line">    os.makedirs(save_path)</span><br><span class="line"></span><br><span class="line">for link in all_asset_links:</span><br><span class="line">    response = requests.get(link, stream=True)</span><br><span class="line">    filename = os.path.join(save_path, link.split(&#x27;/&#x27;)[-1])</span><br><span class="line"></span><br><span class="line">    if response.status_code == 200:</span><br><span class="line">        with open(filename, &#x27;wb&#x27;) as f:</span><br><span class="line">            for chunk in response.iter_content(1024):</span><br><span class="line">                f.write(chunk)</span><br><span class="line"></span><br><span class="line"># 关闭浏览器</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure>
<h1 id="标记数据集制作"><a href="#标记数据集制作" class="headerlink" title="标记数据集制作"></a>标记数据集制作</h1><p>对剧情脚本重新进行整理，就能得到标记好的数据集了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import os</span><br><span class="line">import json</span><br><span class="line">import re</span><br><span class="line"></span><br><span class="line">def extract_data(data, current_data=None, output_file=None):</span><br><span class="line">    if current_data is None:</span><br><span class="line">        current_data = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    if isinstance(data, dict):</span><br><span class="line">        if &#x27;windowDisplayName&#x27; in data:</span><br><span class="line">            current_data[&#x27;windowDisplayName&#x27;] = data[&#x27;windowDisplayName&#x27;]</span><br><span class="line">        if &#x27;body&#x27; in data:</span><br><span class="line">            # 移除body中的换行符</span><br><span class="line">            current_data[&#x27;body&#x27;] = data[&#x27;body&#x27;].replace(&#x27;\n&#x27;, &#x27;&#x27;)</span><br><span class="line">        if &#x27;voiceId&#x27; in data:</span><br><span class="line">            current_data[&#x27;voiceId&#x27;] = data[&#x27;voiceId&#x27;]</span><br><span class="line">            </span><br><span class="line">            # 检查所有字段是否非空</span><br><span class="line">            valid_data = all(current_data.get(k) for k in [&#x27;windowDisplayName&#x27;, &#x27;body&#x27;, &#x27;voiceId&#x27;])</span><br><span class="line">            # 检查 windowDisplayName 是否包含 &quot;・&quot;</span><br><span class="line">            valid_displayname = &quot;・&quot; not in current_data.get(&#x27;windowDisplayName&#x27;, &quot;&quot;)</span><br><span class="line">            # 检查 body 是否只包含标点符号</span><br><span class="line">            valid_body = bool(re.sub(r&#x27;[^\w]&#x27;, &#x27;&#x27;, current_data.get(&#x27;body&#x27;, &quot;&quot;)))</span><br><span class="line">            </span><br><span class="line">            # 如果满足所有条件，输出结果到文件</span><br><span class="line">            if valid_data and valid_displayname and valid_body:</span><br><span class="line">                output_file.write(f&quot;&#123;current_data[&#x27;voiceId&#x27;]&#125;|&#123;current_data[&#x27;windowDisplayName&#x27;]&#125;|&#123;current_data[&#x27;body&#x27;]&#125;\n&quot;)</span><br><span class="line">                current_data.clear()  # 清空当前数据以供下次使用</span><br><span class="line">        </span><br><span class="line">        for key in data:</span><br><span class="line">            extract_data(data[key], current_data, output_file)</span><br><span class="line">    elif isinstance(data, list):</span><br><span class="line">        for item in data:</span><br><span class="line">            extract_data(item, current_data, output_file)</span><br><span class="line"></span><br><span class="line"># 获取目录下的所有文件</span><br><span class="line">directory = &quot;C:/Users/Admin/爬虫/assert&quot;</span><br><span class="line">files = os.listdir(directory)</span><br><span class="line"></span><br><span class="line"># 打开一个txt文件以保存结果</span><br><span class="line">with open(&quot;BangDreamSortPath.txt&quot;, &quot;w&quot;, encoding=&quot;utf-8&quot;) as output_file:</span><br><span class="line">    # 遍历所有文件</span><br><span class="line">    for filename in files:</span><br><span class="line">        if filename.endswith(&quot;.asset&quot;):</span><br><span class="line">            file_path = os.path.join(directory, filename)</span><br><span class="line">            with open(file_path, &#x27;r&#x27;, encoding=&#x27;utf-8&#x27;) as file:</span><br><span class="line">                content = json.load(file)</span><br><span class="line">                extract_data(content, output_file=output_file)</span><br></pre></td></tr></table></figure>
<p>制作预处理清单<br>为了方便在colab平台上快速处理数据集，将mp3地址和整理完的”BangDreamSortPath.txt”重新整合:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 从 WholeMp3UrlPaths.txt 创建一个映射</span><br><span class="line">path_mapping = &#123;&#125;</span><br><span class="line">with open(&quot;WholeMp3UrlPaths.txt&quot;, &quot;r&quot;, encoding=&quot;utf-8&quot;, errors=&quot;ignore&quot;) as f:</span><br><span class="line">    for line in f:</span><br><span class="line">        try:</span><br><span class="line">            audio_id = line.strip().split(&quot;/&quot;)[-1].replace(&quot;.mp3&quot;, &quot;&quot;)</span><br><span class="line">            path_mapping[audio_id] = line.strip(&#x27;\n&#x27;)</span><br><span class="line">        except Exception as e:</span><br><span class="line">            print(f&quot;Error processing line &#123;line&#125;: &#123;e&#125;&quot;)</span><br><span class="line"></span><br><span class="line"># 遍历 BangDreamSortPath.txt 的每一行，并根据需要替换音频名</span><br><span class="line">new_results = []</span><br><span class="line">with open(&quot;BangDreamSortPath.txt&quot;, &quot;r&quot;, encoding=&quot;utf-8&quot;) as f:</span><br><span class="line">    for line in f:</span><br><span class="line">        try:</span><br><span class="line">            audio_id = line.split(&quot;|&quot;)[0]</span><br><span class="line">            if audio_id in path_mapping:</span><br><span class="line">                line = line.replace(audio_id, path_mapping[audio_id])</span><br><span class="line">            new_results.append(line)</span><br><span class="line">        except Exception as e:</span><br><span class="line">            print(f&quot;Error processing line &#123;line&#125;: &#123;e&#125;&quot;)</span><br><span class="line"></span><br><span class="line"># 将新的结果保存到新的 txt 文件中</span><br><span class="line">with open(&quot;SortPathUrl.txt&quot;, &quot;w&quot;, encoding=&quot;utf-8&quot;) as f:</span><br><span class="line">    f.writelines(new_results)</span><br><span class="line"></span><br><span class="line"># 简单地筛掉无效网址</span><br><span class="line">with open(file_path, &#x27;r&#x27;, encoding=&#x27;utf-8&#x27;) as file:</span><br><span class="line">    lines = file.readlines()</span><br><span class="line"></span><br><span class="line"># 只保留以https开头的行</span><br><span class="line">filtered_lines = [line for line in lines if line.startswith(&#x27;https&#x27;)]</span><br><span class="line"></span><br><span class="line"># 将筛选后的内容写回文件</span><br><span class="line">with open(file_path, &#x27;w&#x27;, encoding=&#x27;utf-8&#x27;) as file:</span><br><span class="line">    file.writelines(filtered_lines)</span><br><span class="line"></span><br><span class="line">print(&quot;File has been processed.&quot;)</span><br></pre></td></tr></table></figure>
<p>这样就能省区繁杂的上传流程而能够直接在colab上进行处理了。</p>
<h1 id="模型训练"><a href="#模型训练" class="headerlink" title="模型训练"></a>模型训练</h1><p>网上Bert-VITS2的教程十分脑残，大概是那边不愿意把一键流程流出导致滥用。<br>先说一下要点。<br>数据的预处理没上面好说的，用request模块从SortPathUrl.txt下载音频文件时时直接处理成44100的单声道就好了，用不上resample.py<br>训练前先用preprocess_text.py处理SortPathUrl.txt(记得把里面的网址替换为真实路径)，会自动生成config。<br>下载日语bert模型，运行bert_gen.py 然后直接训练。<br>然后这样在train_ms.py def run() 函数的上面加入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import os</span><br><span class="line"></span><br><span class="line">os.environ[&#x27;MASTER_ADDR&#x27;] = &#x27;127.0.0.1&#x27;</span><br><span class="line">os.environ[&#x27;MASTER_PORT&#x27;] = &#x27;8880&#x27;</span><br><span class="line">os.environ[&#x27;WORLD_SIZE&#x27;] = &#x27;1&#x27;</span><br><span class="line">os.environ[&#x27;RANK&#x27;] = &#x27;0&#x27;</span><br></pre></td></tr></table></figure>
<p>事后记:逆天colab重采样的音频大概率没法保存成功，浪费算力是板上钉钉的了(悲)</p>
]]></content>
      <categories>
        <category>Projects</category>
      </categories>
      <tags>
        <tag>original</tag>
        <tag>中文</tag>
        <tag>爬虫</tag>
        <tag>TTS</tag>
      </tags>
  </entry>
  <entry>
    <title>Bert-vits2-邦邦&amp;少歌</title>
    <url>/project/2024/09/15/gamescript-2/</url>
    <content><![CDATA[<h1 id="Bang-Dream全员TTS"><a href="#Bang-Dream全员TTS" class="headerlink" title="Bang Dream全员TTS"></a>Bang Dream全员TTS</h1><p><a href="https://huggingface.co/spaces/Mahiruoshi/BangDream-Bert-VITS2">huggingface</a></p>
<h1 id="使用须知"><a href="#使用须知" class="headerlink" title="使用须知"></a>使用须知</h1><p>由于bert-vits项目才刚刚支持日语，所以稳定度和效果都会有影响。<br>参数设置:可以视情况将感情调节和音素控制调节至0.3以下，对应非日常语言(小说等)拥有更好的效果。</p>
<h1 id="使用Galgame引擎进行二创"><a href="#使用Galgame引擎进行二创" class="headerlink" title="使用Galgame引擎进行二创"></a>使用Galgame引擎进行二创</h1><p><a href="https://www.bilibili.com/video/BV1Nj411i7t4">WebGAL</a></p>
<h1 id="将AI皮套人部署到服务器或者直播间"><a href="#将AI皮套人部署到服务器或者直播间" class="headerlink" title="将AI皮套人部署到服务器或者直播间"></a>将AI皮套人部署到服务器或者直播间</h1><p><a href="https://github.com/Paraworks/BangDreamAi">轻量化live2d驱动</a></p>
<h1 id="长文本自动合成："><a href="#长文本自动合成：" class="headerlink" title="长文本自动合成："></a>长文本自动合成：</h1><h2 id="选择1-自定义文本"><a href="#选择1-自定义文本" class="headerlink" title="选择1:自定义文本"></a>选择1:自定义文本</h2><p>与训练用的标记方法相似，用”|”标识符将说话人和内容分割开,参考圣经.txt</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">素世|我也会好好跟你说明我不得不组乐队的理由</span><br><span class="line">素世|我想如果你能见我一面，你就一定能明白的</span><br><span class="line">素世|我是小祥你的同伴</span><br><span class="line">素世|我好想见你</span><br><span class="line">祥子|真是会虚情假意呢</span><br><span class="line">祥子|想演奏是你们的自由，你们就请便吧</span><br></pre></td></tr></table></figure>
<p>实际上并不需要在意”祥子”或者”素世“这些说话人是什么，名字仅仅是用来标记的。<br>比如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">为|我也会好好跟你说明我不得不组乐队的理由</span><br><span class="line">什|我想如果你能见我一面，你就一定能明白的</span><br><span class="line">么|我是小祥你的同伴</span><br><span class="line">要|我好想见你</span><br><span class="line">演奏|真是会虚情假意呢</span><br><span class="line">春日影|想演奏是你们的自由，你们就请便吧</span><br></pre></td></tr></table></figure>
<p>重要的是在 拓展功能&gt;&gt;&gt;&gt;&gt;&gt;角色对应表中进行手动设置<br>详见<a href="https://huggingface.co/spaces/Mahiruoshi/BangDream-Bert-VITS2/blob/main/configs/config.json">config</a>下的”spk2id”项。对于算法来说，你实际上是在完成一个<br>“说话人所扮演的角色名”—&gt;”说话人”—&gt;”编号”<br>作为导演，需要让说话人扮演你所希望的角色：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">そよ|素世</span><br><span class="line">祥子|祥子</span><br><span class="line">ましろ|为</span><br><span class="line">七深|什</span><br><span class="line">透子|么</span><br><span class="line">つくし|要</span><br><span class="line">瑠唯|演奏</span><br><span class="line">そよ|春日影</span><br></pre></td></tr></table></figure>
<h2 id="选择2-游戏脚本自动解读"><a href="#选择2-游戏脚本自动解读" class="headerlink" title="选择2:游戏脚本自动解读"></a>选择2:游戏脚本自动解读</h2><p>其实我不知道让她们重新读一遍日语有什么用，但因为不用做任何映射关系，直接去下载一个日语脚本丢进去就好了。<br>当然，可以让她们读中文脚本，帮助入眠的同时又过了遍剧情()。<br>下载<a href="https://bestdori.com/tool/explorer/asset/tw/scenario/band/021">台服脚本</a><br>设置角色对应关系(其实就是译名):</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ましろ|真白</span><br><span class="line">七深|七深</span><br><span class="line">透子|透子</span><br><span class="line">つくし|筑紫</span><br><span class="line">瑠唯|瑠唯</span><br></pre></td></tr></table></figure>
<h2 id="选择3-读小说-建议本地"><a href="#选择3-读小说-建议本地" class="headerlink" title="选择3:读小说(建议本地)"></a>选择3:读小说(建议本地)</h2><p>支持epub、txt和mobi，但出于稳定性考虑建议先自行用工具转换成txt格式。<br>当然，在网页端是无法完整合成的，确保在本地运行并且安装了gpu支持(也就是cuda和cudnn)。<br>所有音频都会被存储在”BangDream-Bert-VITS2&#x2F;books”文件夹下，记得合成后转移已生成文件，再次合成时将会自动清空。</p>
<h1 id="本地运行"><a href="#本地运行" class="headerlink" title="本地运行:"></a>本地运行:</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://huggingface.co/spaces/Mahiruoshi/BangDream-Bert-VITS2</span><br><span class="line">cd BangDream-Bert-VITS2</span><br><span class="line">pip install -r requirements.txt</span><br><span class="line">python app.py</span><br></pre></td></tr></table></figure>
<h2 id="样例API-使用说明"><a href="#样例API-使用说明" class="headerlink" title="样例API 使用说明"></a>样例API 使用说明</h2><p>Flask启动代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">logger = logging.getLogger(__name__)</span><br><span class="line">import datetime</span><br><span class="line">import numpy as np</span><br><span class="line">import torch</span><br><span class="line">from ebooklib import epub</span><br><span class="line">import PyPDF2</span><br><span class="line">from PyPDF2 import PdfReader</span><br><span class="line">import zipfile</span><br><span class="line">import shutil</span><br><span class="line">import sys, os</span><br><span class="line">import json</span><br><span class="line">from bs4 import BeautifulSoup</span><br><span class="line">import argparse</span><br><span class="line">import commons</span><br><span class="line">import utils</span><br><span class="line">from models import SynthesizerTrn</span><br><span class="line">from text.symbols import symbols</span><br><span class="line">from text import cleaned_text_to_sequence, get_bert</span><br><span class="line">from text.cleaner import clean_text</span><br><span class="line">import gradio as gr</span><br><span class="line">import webbrowser</span><br><span class="line">import re</span><br><span class="line">from scipy.io.wavfile import write</span><br><span class="line"></span><br><span class="line">net_g = None</span><br><span class="line"></span><br><span class="line">if sys.platform == &quot;darwin&quot; and torch.backends.mps.is_available():</span><br><span class="line">    device = &quot;mps&quot;</span><br><span class="line">    os.environ[&quot;PYTORCH_ENABLE_MPS_FALLBACK&quot;] = &quot;1&quot;</span><br><span class="line">else:</span><br><span class="line">    device = &quot;cuda&quot;</span><br><span class="line"></span><br><span class="line">def is_japanese(string):</span><br><span class="line">        for ch in string:</span><br><span class="line">            if ord(ch) &gt; 0x3040 and ord(ch) &lt; 0x30FF:</span><br><span class="line">                return True</span><br><span class="line">        return False</span><br><span class="line"></span><br><span class="line">def get_text(text, language_str, hps):</span><br><span class="line">    norm_text, phone, tone, word2ph = clean_text(text, language_str)</span><br><span class="line">    phone, tone, language = cleaned_text_to_sequence(phone, tone, language_str)</span><br><span class="line"></span><br><span class="line">    if hps.data.add_blank:</span><br><span class="line">        phone = commons.intersperse(phone, 0)</span><br><span class="line">        tone = commons.intersperse(tone, 0)</span><br><span class="line">        language = commons.intersperse(language, 0)</span><br><span class="line">        for i in range(len(word2ph)):</span><br><span class="line">            word2ph[i] = word2ph[i] * 2</span><br><span class="line">        word2ph[0] += 1</span><br><span class="line">    bert = get_bert(norm_text, word2ph, language_str, device)</span><br><span class="line">    del word2ph</span><br><span class="line">    assert bert.shape[-1] == len(phone), phone</span><br><span class="line"></span><br><span class="line">    if language_str == &quot;ZH&quot;:</span><br><span class="line">        bert = bert</span><br><span class="line">        ja_bert = torch.zeros(768, len(phone))</span><br><span class="line">    elif language_str == &quot;JA&quot;:</span><br><span class="line">        ja_bert = bert</span><br><span class="line">        bert = torch.zeros(1024, len(phone))</span><br><span class="line">    else:</span><br><span class="line">        bert = torch.zeros(1024, len(phone))</span><br><span class="line">        ja_bert = torch.zeros(768, len(phone))</span><br><span class="line"></span><br><span class="line">    assert bert.shape[-1] == len(</span><br><span class="line">        phone</span><br><span class="line">    ), f&quot;Bert seq len &#123;bert.shape[-1]&#125; != &#123;len(phone)&#125;&quot;</span><br><span class="line"></span><br><span class="line">    phone = torch.LongTensor(phone)</span><br><span class="line">    tone = torch.LongTensor(tone)</span><br><span class="line">    language = torch.LongTensor(language)</span><br><span class="line">    return bert, ja_bert, phone, tone, language</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def infer(text, sdp_ratio, noise_scale, noise_scale_w, length_scale, sid, language):</span><br><span class="line">    global net_g</span><br><span class="line">    bert, ja_bert, phones, tones, lang_ids = get_text(text, language, hps)</span><br><span class="line">    with torch.no_grad():</span><br><span class="line">        x_tst = phones.to(device).unsqueeze(0)</span><br><span class="line">        tones = tones.to(device).unsqueeze(0)</span><br><span class="line">        lang_ids = lang_ids.to(device).unsqueeze(0)</span><br><span class="line">        bert = bert.to(device).unsqueeze(0)</span><br><span class="line">        ja_bert = ja_bert.to(device).unsqueeze(0)</span><br><span class="line">        x_tst_lengths = torch.LongTensor([phones.size(0)]).to(device)</span><br><span class="line">        del phones</span><br><span class="line">        speakers = torch.LongTensor([hps.data.spk2id[sid]]).to(device)</span><br><span class="line">        audio = (</span><br><span class="line">            net_g.infer(</span><br><span class="line">                x_tst,</span><br><span class="line">                x_tst_lengths,</span><br><span class="line">                speakers,</span><br><span class="line">                tones,</span><br><span class="line">                lang_ids,</span><br><span class="line">                bert,</span><br><span class="line">                ja_bert,</span><br><span class="line">                sdp_ratio=sdp_ratio,</span><br><span class="line">                noise_scale=noise_scale,</span><br><span class="line">                noise_scale_w=noise_scale_w,</span><br><span class="line">                length_scale=length_scale,</span><br><span class="line">            )[0][0, 0]</span><br><span class="line">            .data.cpu()</span><br><span class="line">            .float()</span><br><span class="line">            .numpy()</span><br><span class="line">        )</span><br><span class="line">        del x_tst, tones, lang_ids, bert, x_tst_lengths, speakers</span><br><span class="line">        return audio</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def tts_fn(</span><br><span class="line">    text, speaker, sdp_ratio, noise_scale, noise_scale_w, length_scale, language</span><br><span class="line">):</span><br><span class="line">    with torch.no_grad():</span><br><span class="line">        audio = infer(</span><br><span class="line">            text,</span><br><span class="line">            sdp_ratio=sdp_ratio,</span><br><span class="line">            noise_scale=noise_scale,</span><br><span class="line">            noise_scale_w=noise_scale_w,</span><br><span class="line">            length_scale=length_scale,</span><br><span class="line">            sid=speaker,</span><br><span class="line">            language= &quot;JP&quot; if is_japanese(text) else &quot;ZH&quot;,</span><br><span class="line">        )</span><br><span class="line">        torch.cuda.empty_cache()</span><br><span class="line">        write(&quot;books/temp.wav&quot;, 44100, audio)</span><br><span class="line">    return &quot;Success&quot;</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">@app.route(&#x27;/tts&#x27;)</span><br><span class="line">def tts_api():</span><br><span class="line">    # 从请求中获取参数</span><br><span class="line">    text = request.args.get(&#x27;text&#x27;)</span><br><span class="line">    speaker = request.args.get(&#x27;speaker&#x27;)</span><br><span class="line">    sdp_ratio = float(request.args.get(&#x27;sdp_ratio&#x27;, 0.2))</span><br><span class="line">    noise_scale = float(request.args.get(&#x27;noise_scale&#x27;, 0.6))</span><br><span class="line">    noise_scale_w = float(request.args.get(&#x27;noise_scale_w&#x27;, 0.8))</span><br><span class="line">    length_scale = float(request.args.get(&#x27;length_scale&#x27;, 1))</span><br><span class="line">    </span><br><span class="line">    status = tts_fn(text, speaker=&#x27;つくし&#x27;, sdp_ratio=0.2, noise_scale=0.6, noise_scale_w=0.8, length_scale=1)</span><br><span class="line">    with open(&#x27;books/temp.wav&#x27;,&#x27;rb&#x27;) as bit:</span><br><span class="line">        wav_bytes = bit.read()</span><br><span class="line">    </span><br><span class="line">    headers = &#123;</span><br><span class="line">            &#x27;Content-Type&#x27;: &#x27;audio/wav&#x27;,</span><br><span class="line">            &#x27;Text&#x27;: status.encode(&#x27;utf-8&#x27;)&#125;</span><br><span class="line">    return wav_bytes, 200, headers</span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    parser = argparse.ArgumentParser()</span><br><span class="line">    parser.add_argument(</span><br><span class="line">        &quot;-m&quot;, &quot;--model&quot;, default=&quot;./logs/BangDream/G_47000.pth&quot;, help=&quot;path of your model&quot;</span><br><span class="line">    )</span><br><span class="line">    parser.add_argument(</span><br><span class="line">        &quot;-c&quot;,</span><br><span class="line">        &quot;--config&quot;,</span><br><span class="line">        default=&quot;./logs/BangDream/config.json&quot;,</span><br><span class="line">        help=&quot;path of your config file&quot;,</span><br><span class="line">    )</span><br><span class="line">    parser.add_argument(</span><br><span class="line">        &quot;--share&quot;, default=True, help=&quot;make link public&quot;, action=&quot;store_true&quot;</span><br><span class="line">    )</span><br><span class="line">    parser.add_argument(</span><br><span class="line">        &quot;-d&quot;, &quot;--debug&quot;, action=&quot;store_true&quot;, help=&quot;enable DEBUG-LEVEL log&quot;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    args = parser.parse_args()</span><br><span class="line">    if args.debug:</span><br><span class="line">        logger.info(&quot;Enable DEBUG-LEVEL log&quot;)</span><br><span class="line">        logging.basicConfig(level=logging.DEBUG)</span><br><span class="line">    hps = utils.get_hparams_from_file(args.config)</span><br><span class="line"></span><br><span class="line">    device = (</span><br><span class="line">        &quot;cuda:0&quot;</span><br><span class="line">        if torch.cuda.is_available()</span><br><span class="line">        else (</span><br><span class="line">            &quot;mps&quot;</span><br><span class="line">            if sys.platform == &quot;darwin&quot; and torch.backends.mps.is_available()</span><br><span class="line">            else &quot;cpu&quot;</span><br><span class="line">        )</span><br><span class="line">    )</span><br><span class="line">    net_g = SynthesizerTrn(</span><br><span class="line">        len(symbols),</span><br><span class="line">        hps.data.filter_length // 2 + 1,</span><br><span class="line">        hps.train.segment_size // hps.data.hop_length,</span><br><span class="line">        n_speakers=hps.data.n_speakers,</span><br><span class="line">        **hps.model,</span><br><span class="line">    ).to(device)</span><br><span class="line">    _ = net_g.eval()</span><br><span class="line"></span><br><span class="line">    _ = utils.load_checkpoint(args.model, net_g, None, skip_optimizer=True)</span><br><span class="line"></span><br><span class="line">    app.run(host=&quot;0.0.0.0&quot;, port=8080)</span><br></pre></td></tr></table></figure>
<h2 id="API-请求路径："><a href="#API-请求路径：" class="headerlink" title="API 请求路径："></a>API 请求路径：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/tts</span><br></pre></td></tr></table></figure>
<p>请求方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET</span><br></pre></td></tr></table></figure>
<h2 id="请求参数"><a href="#请求参数" class="headerlink" title="请求参数:"></a>请求参数:</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">text (必须) - 您想要转化为语音的文本。</span><br><span class="line">speaker (可选) - 选择的发音人，默认为 ‘つくし’。</span><br><span class="line">sdp_ratio (可选) - 参数值，默认为 0.2。</span><br><span class="line">noise_scale (可选) - 噪音比例，默认为 0.6。</span><br><span class="line">noise_scale_w (可选) - 噪音比例宽度，默认为 0.8。</span><br><span class="line">length_scale (可选) - 长度比例，默认为 1。</span><br></pre></td></tr></table></figure>
<h2 id="响应："><a href="#响应：" class="headerlink" title="响应："></a>响应：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">响应为 WAV 格式的音频文件，可以直接播放。</span><br></pre></td></tr></table></figure>
<h2 id="响应头："><a href="#响应头：" class="headerlink" title="响应头："></a>响应头：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Content-Type: ‘audio/wav’ - 表示响应内容为 WAV 格式的音频文件。</span><br><span class="line">Text: 转化的状态，编码为 UTF-8。</span><br></pre></td></tr></table></figure>
<h2 id="调用示例："><a href="#调用示例：" class="headerlink" title="调用示例："></a>调用示例：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /tts?text=你好，世界！&amp;speaker=つくし&amp;sdp_ratio=0.3&amp;noise_scale=0.5</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Projects</category>
      </categories>
      <tags>
        <tag>original</tag>
        <tag>中文</tag>
        <tag>爬虫</tag>
        <tag>TTS</tag>
      </tags>
  </entry>
  <entry>
    <title>AI vtuber 探索</title>
    <url>/project/2024/09/15/gamescript-3/</url>
    <content><![CDATA[<h1 id="邦邦特化AI聊天-2代live2d"><a href="#邦邦特化AI聊天-2代live2d" class="headerlink" title="邦邦特化AI聊天(2代live2d)"></a>邦邦特化AI聊天(2代live2d)</h1><p>本分支为适应本地快速部署的轻量化版本，可从<a href="https://github.com/Paraworks/BangDreamAi/tree/main">main</a>分支或者其它分支查看中小型网页部署版或开发版 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#本机部署</span><br><span class="line">git clone https://github.com/Paraworks/BangDreamAi</span><br><span class="line">pip install -r requirements.txt</span><br><span class="line">python app.py</span><br></pre></td></tr></table></figure>
<p>默认5000端口</p>
<h2 id="配置live2d模型"><a href="#配置live2d模型" class="headerlink" title="配置live2d模型"></a>配置live2d模型</h2><p>BangDream的live2d可以直接从bestdori手动下载。Github上也有许多提取好的仓库</p>
<h3 id="五团-卡面比较多"><a href="#五团-卡面比较多" class="headerlink" title="五团(卡面比较多)"></a><a href="https://github.com/seia-soto/BanG-Dream-Live2D">五团(卡面比较多)</a></h3><h3 id="七团"><a href="#七团" class="headerlink" title="七团"></a><a href="https://github.com/Eikanya/Live2d-model/tree/master/BanG%20Dream!">七团</a></h3><h3 id="b站北极暖水港大佬"><a href="#b站北极暖水港大佬" class="headerlink" title="b站北极暖水港大佬"></a><a href="https://pan.baidu.com/s/1FBYfLBzhIS50VkzrENfcrg?pwd=mq86#list/path=%2F">b站北极暖水港大佬</a></h3><h3 id="你需要将这些模型放在-static-Resources下"><a href="#你需要将这些模型放在-static-Resources下" class="headerlink" title="你需要将这些模型放在&#x2F;static&#x2F;Resources下"></a>你需要将这些模型放在<a href="https://github.com/Paraworks/BangDreamAi/tree/light/static/Resources">&#x2F;static&#x2F;Resources</a>下</h3><p>按照如下标准</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/Resources/&#123;乐队&#125;/&#123;角色&#125;/&#123;模型名&#125;/model.json</span><br></pre></td></tr></table></figure>
<p>这样程序可以自动识别乐队和角色,否则无法在前端选择</p>
<h2 id="模型配置"><a href="#模型配置" class="headerlink" title="模型配置"></a>模型配置</h2><p>如果没什么大问题，可以直接在前端页面配置，但也可以本地直接修改config.json</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">默认配置</span><br><span class="line">&#123;</span><br><span class="line">    &quot;api&quot;: &quot;chatgpt&quot;,</span><br><span class="line">    &quot;apiKey&quot;: &quot;&quot;,</span><br><span class="line">    &quot;apiLink&quot;: &quot;&quot;,</span><br><span class="line">    &quot;band&quot;: &quot;Afterglow&quot;,</span><br><span class="line">    &quot;duration&quot;: 2,</span><br><span class="line">    &quot;frequence&quot;: 0.5,</span><br><span class="line">    &quot;modelPath&quot;: &quot;static/Resources/Afterglow/蘭/live/model.json&quot;,</span><br><span class="line">    &quot;mouseTrack&quot;: 1,</span><br><span class="line">    &quot;positionX&quot;: 300,</span><br><span class="line">    &quot;positionY&quot;: 50,</span><br><span class="line">    &quot;scale&quot;: 0.3,</span><br><span class="line">    &quot;speaker&quot;: &quot;蘭&quot;,</span><br><span class="line">    &quot;stopBreath&quot;: 0,</span><br><span class="line">    &quot;text&quot;: &#123;</span><br><span class="line">        &quot;response&quot;: &quot;初始化成功&quot;,</span><br><span class="line">        &quot;expression&quot;: null,</span><br><span class="line">        &quot;motion&quot;: null</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;textApiBaseUrl&quot;: &quot;http://127.0.0.1:5000/api/sentence/test&quot;,</span><br><span class="line">    &quot;ttsApiBaseUrl&quot;: &quot;http://127.0.0.1:8000/?is_chat=false&quot;,</span><br><span class="line">    &quot;volum&quot;: 70</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="启动TTS合成"><a href="#启动TTS合成" class="headerlink" title="启动TTS合成"></a>启动TTS合成</h2><p><a href="https://nijigaku.top/2023/10/03/BangDreamTTS/">TTS(Bang dream Bert vits示例)</a>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://huggingface.co/spaces/Mahiruoshi/MyGO_VIts-bert</span><br><span class="line">cd MyGO_VIts-bert</span><br><span class="line">pip install -r requirements.txt</span><br><span class="line">pip install Flask</span><br><span class="line">pip install Flask-CORS</span><br><span class="line">python server.py</span><br></pre></td></tr></table></figure>
<h2 id="自定义chatbot"><a href="#自定义chatbot" class="headerlink" title="自定义chatbot"></a>自定义chatbot</h2><p>由于在前端配置完apikey后，直接跑chatgpt也大概率跑不通,建议自行修改<a href="https://github.com/Paraworks/BangDreamAi/tree/light/chat.py">chat.py</a>的相关配置以及逻辑</p>
<h2 id="To-do-list"><a href="#To-do-list" class="headerlink" title="To do list"></a>To do list</h2><p>自定义直播间管人配置(未完成)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;url&#125;/&#123;session_id&#125;/&#123;task_id&#125;</span><br></pre></td></tr></table></figure>
<h2 id="OBS-配置详解："><a href="#OBS-配置详解：" class="headerlink" title="OBS 配置详解："></a>OBS 配置详解：</h2><h4 id="live2d-配置"><a href="#live2d-配置" class="headerlink" title="live2d 配置"></a>live2d 配置</h4><ul>
<li>来源 &gt; + &gt; 浏览器 &gt; 新建 &gt; URL：填入上一步生成的live2d链接，一般是localhost:xxxx</li>
</ul>
<h4 id="弹幕姬"><a href="#弹幕姬" class="headerlink" title="弹幕姬"></a><a href="https://chat.bilisc.com/">弹幕姬</a></h4><ul>
<li>来源 &gt; + &gt; 浏览器 &gt; 新建 &gt; URL：参照<a href="https://chat.bilisc.com/help">说明</a>填入链接以及css</li>
</ul>
<h4 id="B-站推流配置"><a href="#B-站推流配置" class="headerlink" title="B 站推流配置"></a>B 站推流配置</h4><ul>
<li>(obs内)设置（Preferences）&gt; 直播 &gt; 服务 &gt; 自定义 &gt; 填写 bilibili服务器以及推流码…</li>
<li>推流码填写「B 站首页 &gt; 头像 &gt; 推荐服务 &gt; 直播中心 &gt; 左侧“我的直播间”&gt; 填好直播分类、房间标题 &gt; 开始直播，然后会显示的串流密钥」</li>
</ul>
<h2 id="开发历程"><a href="#开发历程" class="headerlink" title="开发历程"></a>开发历程</h2><p>服务器部署中踩过的一些坑:<br>TTS模型非常吃内存，而中文的bert模型大小是日语的几倍，在我使用的4核4G内存的服务器上就只能进行日语TTS了。<br>就目前而言推荐用<a href="https://huggingface.co/spaces/Mahiruoshi/MyGO_VIts-bert">Mygo</a>的bert模型，不论是大小还是效果都理想一些。</p>
<h2 id="技术细节-用pixi-live2d-display驱动live2d"><a href="#技术细节-用pixi-live2d-display驱动live2d" class="headerlink" title="技术细节:用pixi-live2d-display驱动live2d"></a>技术细节:用pixi-live2d-display驱动live2d</h2><p>live2d我之前也没碰过，就跟着这个<a href="https://zhuanlan.zhihu.com/p/638474467">项目</a>走了下来，然后发现这玩意整成皮套人可能还是最容易的。然后我还是遇到了那个问题。<br>pixi-live2d-display不支持口型同步，其实cubism本体也需要自己手搓相关代码。<br>于是我找到了这个<a href="https://github.com/itorr/itorr/issues/7">issue</a><br>每个live2d模型都有对张嘴角度的设定，也就是lip</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">model.internalModel.coreModel.setParameterValueById(&#x27;ParamMouthOpenY&#x27;,v);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>而bang dream使用的是二代模型，参数不通用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">model.internalModel.coreModel.setParamFloat(&#x27;PARAM_MOUTH_OPEN_Y&#x27;, v);</span><br></pre></td></tr></table></figure>
<p>之后要做的事说白了就是先调用函数分析wav文件的响度，将其转化成lip参数对应的区间(0~1)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const run = () =&gt; &#123;</span><br><span class="line">    if (!playing) return;</span><br><span class="line">    const frequencyData = getByteFrequencyData(analyser, new Uint8Array(analyser.frequencyBinCount));</span><br><span class="line">    const arr = [];</span><br><span class="line">    for (let i = 0; i &lt; 1000; i += o) &#123;</span><br><span class="line">        arr.push(frequencyData[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    setMouthOpenY((arrayAdd(arr) / arr.length - 20) / 60);</span><br><span class="line">    setTimeout(run, 1000 / 30);</span><br><span class="line">&#125;;</span><br><span class="line">run();</span><br></pre></td></tr></table></figure>
<p>因为所用到的是wav文件，需要对参数进行微调。<br>这样就可以让皮套人说话了，就是<a href="https://github.com/Paraworks/BangDreamAi/blob/main/live2d/src/components/index.js">index.js</a><br>程序会向目标端口发送请求获取待合成文本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">let text;</span><br><span class="line">try &#123;//从launcher.py启动的flask服务中获取待读文本</span><br><span class="line">    const response = await fetch(&#x27;http://127.0.0.1:5180/show&#x27;);</span><br><span class="line">    text = await response.text();</span><br><span class="line">&#125; catch (error) &#123;</span><br><span class="line">    console.error(&#x27;Failed to get text from the server&#x27;, error);</span><br><span class="line">    return;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>之后将其发送给TTS端</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">request.open(&#x27;GET&#x27;, `http://127.0.0.1:5000/tts?text=$&#123;encodeURIComponent(text)&#125;&amp;speaker=ましろ`, true);</span><br></pre></td></tr></table></figure>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>综上:<br>前端组件+chatot程序+live2d+TTS &#x3D; 服务器或本地端”AI vtuber”<br>弹幕监听+chatbot(两者可以直接整合在一起)+TTS+vtuber &#x3D; AI Vtuber</p>
]]></content>
      <categories>
        <category>Projects</category>
      </categories>
      <tags>
        <tag>original</tag>
        <tag>中文</tag>
        <tag>爬虫</tag>
        <tag>TTS</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/project/2024/09/15/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
</search>
